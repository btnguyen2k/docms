## Azure DevOps pipeline to build & deploy DOCMS document site
# touch 1

trigger:
  batch: true
  branches:
    include: ['*']
  paths:
    exclude: ['docs/*']

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: goVersion
  value: '1.17'
- name: goBuiltAppName
  value: 'main'
- name: nodejsVersion
  value: '18.x'
- name: dockerVersion
  value: '19.03.12'
- name: branchMasterChanged
  value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
- name: branchDockerHubChanged
  value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/dockerhub-build') }}
- name: branchIdBtnguyen2kChanged
  value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/id.btnguyen2k-build') }}
- name: goTestPath
  value: './src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user'
- group: Release # merge with ADO env group named 'Release'

stages:
- stage: build
  displayName: Build project
  jobs:
  - job: build
    displayName: Build project
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: NodeTool@0
      displayName: Prepare NodeJs env
      inputs:
        versionSpec: '$(nodejsVersion)'
    - task: Npm@1
      displayName: 'FE: npm install'
      inputs:
        command: install
        workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
    - task: Npm@1
      displayName: 'FE: npm run build'
      inputs:
        command: custom
        customCommand: 'run build'
        workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
    - script: cd $(System.DefaultWorkingDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
      displayName: 'BE: go build'

- stage: test
  displayName: Run tests
  dependsOn: build
  condition: and(succeeded(), or(eq(variables['branchDockerHubChanged'], true), eq(variables['branchIdBtnguyen2kChanged'], true)))
  jobs:
  - job: test_aws_dynamodb
    displayName: Run tests against AWS DynamoDB
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --rm --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
        sleep 5
      displayName: Start AWS DynamoDB server
    - script: |
        export AWS_REGION="us-west-2"
        export AWS_ACCESS_KEY_ID="DUMMYIDEXAMPLE"
        export AWS_SECRET_ACCESS_KEY="DUMMYEXAMPLEKEY"
        export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against AWS DynamoDB'
  # - job: test_azure_cosmosdb
  #   displayName: Run tests against Azure Cosmos DB
  #   pool:
  #     vmImage: 'windows-latest'
  #   steps:
  #   - task: GoTool@0
  #     displayName: Prepare Go env
  #     inputs:
  #       version: '$(goVersion)'
  #   - script: |
  #       echo "Assumming running in cmd.exe"
  #       REM "Azure CosmosDB Emulator will be installed to C:\Program Files\Azure Cosmos DB Emulator\"
  #       REM choco install -y azure-cosmosdb-emulator
  #       powershell "& \"C:\Program Files\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe\""
  #       powershell -command start-Sleep -s 120
  #       powershell try { Invoke-RestMethod -Method GET https://127.0.0.1:8081/ } catch {}
  #       powershell netstat -nt
  #       sleep 5
  #     displayName: Start Azure CosmosDB Emulator server
  #   - script: |
  #       set COSMOSDB_DRIVER=gocosmos
  #       set COSMOSDB_URL="AccountEndpoint=https://127.0.0.1:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=="
  #       set TIMEZONE="Asia/Ho_Chi_Minh"
  #       cd $(System.DefaultWorkingDirectory)/be-api
  #       go test -v -p 1 -count 1 ./src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user
  #     displayName: 'BE: Run tests against Azure Cosmos DB'
  - job: test_pgsql
    displayName: Run tests against PostgreSQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
        sleep 5
      displayName: Start PostgreSQL server
    - script: |
        export PGSQL_DRIVER="pgx"
        export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against PostgreSQL'
  - job: test_mysql
    displayName: Run tests against MySQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
        sleep 5
      displayName: Start MySQL server
    - script: |
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against MySQL (parseTime=false)'
    - script: |
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against MySQL (parseTime=true)'
  - job: test_mssql
    displayName: Run tests against MSSQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest
        sleep 5
      displayName: Start MSSQL server
    - script: |
        export MSSQL_DRIVER="sqlserver"
        export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against MSSQL'
  - job: test_sqlite
    displayName: Run tests against SQLite
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        export PWD=$(pwd)
        mkdir $PWD/temp
        export SQLITE_DRIVER="sqlite3"
        export SQLITE_URL="$PWD/temp/temp.db"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against SQLite'
  - job: test_mongodb_standalone
    displayName: Run tests against MongoDB (Standalone)
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --name mongodb -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test -e MONGO_INITDB_DATABASE=test -p 27017:27017 mongo:4.2
        sleep 5
      displayName: Start MongoDB server
    - script: |
        export MONGO_DB="test"
        export MONGO_URL="mongodb://test:test@localhost:27017/?authSource=admin"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against MongoDB (Standalone)'
  - job: test_mongodb_replicaset
    displayName: Run tests against MongoDB (ReplicaSet)
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --name mongodb-replset -e MONGODB_REPLICA_SET_MODE=primary -e MONGODB_REPLICA_SET_KEY=myreplset -e MONGODB_ADVERTISED_HOSTNAME=localhost -e MONGODB_PRIMARY_PORT_NUMBER=27017 -e MONGODB_ROOT_PASSWORD=test -e MONGODB_DATABASE=test -p 27017:27017 bitnami/mongodb:4.2
        sleep 5
      displayName: Start MongoDB server
    - script: |
        export MONGO_DB="test"
        export MONGO_URL="mongodb://root:test@localhost:27017/admin?replicaSet=replicaset&w=majority&retryWrites=true"
        cd $(System.DefaultWorkingDirectory)/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: 'BE: Run tests against MongoDB (ReplicaSet)'

- stage: build_dockerhub
  displayName: Build image and publish to Docker Hub
  dependsOn: test
  jobs:
  - job: build_and_publish
    displayName: Build and Publish Docker image
    steps:
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
        echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME

        APP_VERSION=`jq -r '.version' $(System.DefaultWorkingDirectory)/appinfo.json`
        echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
        APP_VERSION_ARR=($(echo $APP_VERSION | tr "." "\n"))
        echo '##vso[task.setvariable variable=APP_VERSION_ARR_0]'${APP_VERSION_ARR[0]}
        echo '##vso[task.setvariable variable=APP_VERSION_ARR_1]'${APP_VERSION_ARR[0]}.${APP_VERSION_ARR[1]}
        APP_VERSION=${APP_VERSION}-b$(Build.BuildId)
        echo '##vso[task.setvariable variable=APP_VERSION_BUILD]'$APP_VERSION

        appInfo=`jq ".version=\"$APP_VERSION\"" $(System.DefaultWorkingDirectory)/appinfo.json`
        echo $appInfo > $(System.DefaultWorkingDirectory)/appinfo.json

        rm -f $(System.DefaultWorkingDirectory)/fe-gui/.env
      displayName: Init application info
    - task: Docker@2
      displayName: Build and Publish Docker image
      inputs:
        command: buildAndPush
        buildContext: '$(System.DefaultWorkingDirectory)'
        containerRegistry: '$(DockerRegistry)'
        repository: '$(DockerRegistryAccount)/$(APP_SHORTNAME)'
        tags: |
          $(APP_VERSION_BUILD)
          $(APP_VERSION_ARR_0)
          $(APP_VERSION_ARR_1)
          latest
    - script: |
        echo '##vso[task.setvariable variable=APP_VERSION_BUILD;isOutput=true]'$APP_VERSION_BUILD
      displayName: Transfer variables to next stage
      name: transfer_variables

- stage: deploy_exteross
  displayName: Build and deploy to ExterOSS instance
  dependsOn: build_dockerhub
  variables:
    APP_VERSION_BUILD: $[ stageDependencies.build_dockerhub.build_and_publish.outputs['transfer_variables.APP_VERSION_BUILD'] ]
  jobs:
  - deployment: deploy
    displayName: Deploy ExterOSS
    environment: exteross
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: |
              echo '##vso[task.setvariable variable=dockerImageTag]$(APP_VERSION_BUILD)'
              APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
              echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
            displayName: Set Docker image tag
          - script: |
              echo '##vso[task.setvariable variable=dockerImageTag]latest'
            displayName: Set Docker image tag to latest if not specified
            condition: eq(variables['APP_VERSION_BUILD'], '')
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(AzureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set extension.use_dynamic_install=yes_without_prompt
                az containerapp update \
                  --name $(ExterOSS_ContainerAppName) \
                  --resource-group $(ExterOSS_ResourceGroupName) \
                  --container-name $(ExterOSS_ContainerAppContainerName) \
                  --image docker.io/$(DockerRegistryAccount)/$(APP_SHORTNAME):$(APP_VERSION_BUILD)

- stage: deploy_id_btnguyen2k
  displayName: Build and deploy to id.btnguyen2k
  dependsOn: build_dockerhub
  condition: and(succeeded(), eq(variables['branchIdBtnguyen2kChanged'], true))
  variables:
    APP_VERSION_BUILD: $[ stageDependencies.build_dockerhub.build_and_publish.outputs['transfer_variables.APP_VERSION_BUILD'] ]
  jobs:
  - deployment: deploy
    displayName: Deploy id.btnguyen2k
    environment: id_btnguyen2k
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: |
              echo '##vso[task.setvariable variable=dockerImageTag]$(APP_VERSION_BUILD)'
              APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
              echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
            displayName: Set Docker image tag
          - script: |
              echo '##vso[task.setvariable variable=dockerImageTag]latest'
            displayName: Set Docker image tag to latest if not specified
            condition: eq(variables['APP_VERSION_BUILD'], '')
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(AzureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set extension.use_dynamic_install=yes_without_prompt
                az containerapp update \
                  --name $(IdBtnguyen2k_ContainerAppName) \
                  --resource-group $(IdBtnguyen2k_ResourceGroupName) \
                  --container-name $(IdBtnguyen2k_ContainerAppContainerName) \
                  --image docker.io/$(DockerRegistryAccount)/$(APP_SHORTNAME):$(APP_VERSION_BUILD)

# - stage: build_id_btnguyen2k
#   displayName: Deploy id.btnguyen2k
#   dependsOn: build_dockerhub
#   condition: eq(variables['branchIdBtnguyen2kChanged'], true)
#   variables:
#     APP_VERSION_BUILD: $[ stageDependencies.build_dockerhub.build_and_publish.outputs['transfer_variables.APP_VERSION_BUILD'] ]
#   jobs:
#   - deployment: deploy
#     displayName: Deploy id.btnguyen2k
#     environment: id_btnguyen2k
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - checkout: self
#             - task: KubectlInstaller@0
#               displayName: Prepare Kubectl CLI
#               inputs: 
#                 kubectlVersion: latest
#             - script: |
#                 APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
#                 echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
#               displayName: Init application info
#             - script: |
#                 echo '##vso[task.setvariable variable=dockerImageTag]$(APP_VERSION_BUILD)'
#               displayName: Set Docker image tag
#             - script: |
#                 echo '##vso[task.setvariable variable=dockerImageTag]latest'
#               displayName: Set Docker image tag to latest if not specified
#               condition: eq(variables['APP_VERSION_BUILD'], '')                  
#             - script: |
#                 echo Docker image tag: $(dockerImageTag)
#                 mkdir -p $(System.DefaultWorkingDirectory)/temp
#                 helm template $(System.DefaultWorkingDirectory)/charts/exter --debug \
#                   --set image.repository='$(DockerRegistryAccount)$(APP_SHORTNAME)' \
#                   --set image.tag='$(dockerImageTag)' \
#                   --set ingress.enabled='true' \
#                   --set ingress.hosts[0].host='$(DomainNameIdBtnguyen)' \
#                   --set ingress.hosts[0].paths[0]='/' \
#                   --set secret.EXTER_TIMEZONE='$(EXTER_TIMEZONE)' \
#                   --set secret.EXTER_HOME_URL='https://$(DomainNameIdBtnguyen)' \
#                   --set secret.EXTER_INIT_SYSTEM_OWNER_ID='$(EXTER_INIT_SYSTEM_OWNER_ID)' \
#                   --set secret.EXTER_DB_TYPE='$(EXTER_DB_TYPE)' \
#                   --set secret.EXTER_DB_PGSQL_URL='$(EXTER_DB_PGSQL_URL)' \
#                   --set secret.EXTER_DB_DYNAMODB_REGION='$(EXTER_DB_DYNAMODB_REGION)' \
#                   --set secret.EXTER_AWS_ACCESS_KEY_ID='$(EXTER_AWS_ACCESS_KEY_ID)' \
#                   --set secret.EXTER_AWS_SECRET_ACCESS_KEY='$(EXTER_AWS_SECRET_ACCESS_KEY)' \
#                   --set secret.EXTER_RSA_PRIVKEY_PASSPHRASE='$(EXTER_RSA_PRIVKEY_PASSPHRASE)' \
#                   --set extercfg.secret_name_keys='$(EXTER_SECRET_NAME_KEYS)' \
#                   --set extercfg.secret_mountpath_keys='/etc/$(APP_SHORTNAME)/keys' \
#                   --set extercfg.rsa_privkey_file='/etc/$(APP_SHORTNAME)/keys/$(EXTER_RSA_PRIVKEY_FILENAME_SECRET_MAP)' \
#                   --set secret.EXTER_GOOGLE_API_PROJECT_ID='$(EXTER_GOOGLE_API_PROJECT_ID)' \
#                   --set secret.EXTER_GOOGLE_API_CLIENT_ID='$(EXTER_GOOGLE_API_CLIENT_ID)' \
#                   --set secret.EXTER_GOOGLE_API_CLIENT_SECRET='$(EXTER_GOOGLE_API_CLIENT_SECRET)' \
#                   --set secret.EXTER_GITHUB_OAUTHAPP_CLIENT_ID='$(EXTER_GITHUB_OAUTHAPP_CLIENT_ID)' \
#                   --set secret.EXTER_GITHUB_OAUTHAPP_CLIENT_SECRET='$(EXTER_GITHUB_OAUTHAPP_CLIENT_SECRET)' \
#                   --set secret.EXTER_FACEBOOK_APP_ID='$(EXTER_FACEBOOK_APP_ID)' \
#                   --set secret.EXTER_FACEBOOK_APP_SECRET='$(EXTER_FACEBOOK_APP_SECRET)' \
#                   --set secret.EXTER_LINKEDIN_CLIENT_ID='$(EXTER_LINKEDIN_CLIENT_ID)' \
#                   --set secret.EXTER_LINKEDIN_CLIENT_SECRET='$(EXTER_LINKEDIN_CLIENT_SECRET)' \
#                   --set secret.EXTER_LINKEDIN_REDIRECT_URI='https://$(DomainNameIdBtnguyen)/app/xlogin?cba=ln' \
#                   --set ingress.tls[0].secretName='$(DomainNameIdBtnguyen)' \
#                   --set ingress.tls[0].hosts[0]='$(DomainNameIdBtnguyen)' \
#                   --set extercfg.debug='false' \
#                   > $(System.DefaultWorkingDirectory)/temp/manifestsBundle.yaml
#               displayName: Bake K8s manifests from Helm chart
#               # KubernetesManifest@0/bake action does not support Helm v3 yet!
#             - task: KubernetesManifest@0
#               displayName: Deploy K8s manifests
#               inputs:
#                 action: deploy
#                 kubernetesServiceConnection: '$(K8sCluster)'
#                 namespace: $(APP_SHORTNAME)
#                 # manifests: $(bake.manifestsBundle)
#                 manifests: $(System.DefaultWorkingDirectory)/temp/manifestsBundle.yaml
#                 rolloutStatusTimeout: '60'